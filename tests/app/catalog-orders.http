### Read Orders via OData
GET http://localhost:4004/catalog/Orders
    ?$expand=Items($expand=book($expand=author))
Authorization: Basic bob:
### Read non existing Order to trigger failed
GET http://localhost:4004/catalog/Orders(64e718c9-ff99-47f1-8ca3-950c850777d3)
Authorization: Basic bob:
### Filter Orders by Currency of Book "currency_code": "GBP"
# works only with HANA
GET http://localhost:4004/catalog/Orders
    ?$expand=Items($expand=book($expand=author))
    &$filter=Items/any(item:item/book/currency_code eq 'GBP')
Authorization: Basic bob:
# Results in the HANA SQL Statment stored in catalog-orders.sql with this parameters [ 'Value from DB', 'GBP', 'bob' ]

### Filter Orders where the Items contain Books from an Author with country_code = "GB"
# Returns: Property 'any' does not exist in type 'CatalogService.Books'
# Using the $filter:
#    &$filter=Items/book/author/country_code eq 'GB'
# returns: Expected a uri token of kinds 'COUNT, LAMBDA_ANY, LAMBDA_ALL, QualifiedName' in 'Items/book/author/country_code eq 'GB'' at position 7
#
# Now let's try:
# Filter Orders where the Items contain Books where Genre name = "Drama"
GET http://localhost:4004/catalog/Orders
    ?$count=true
    &$expand=Items($expand=book($expand=author,genre))
    # Works because item to book to author is always a to one association
    # &$filter=Items/any(item:item/book/author/country_code eq 'GB')
    # Works with @sap/cds 6.5
    &$filter=Items/any(item:item/book/genre/name eq 'Drama')
#    &$filter=Items/any(item:item/book/any(book:book/author/country_code eq 'GB'))
Authorization: Basic bob:
### Read Order Items via OData
# Fails with Entity \"CatalogService.OrderItems\" is not explicitly exposed as part of the service

### Filter for Plant
GET http://localhost:4004/catalog/Orders
    ?$count=true
    &$expand=Items($expand=book($expand=plants))
    &$filter=Items/any(item:item/book/plants/any(p:p/purchasingGroup eq 'C01'))
Authorization: Basic bob:

GET http://localhost:4004/catalog/OrderItems
Authorization: Basic bob:

### Create Orders in two steps
# @name createOrder
POST http://localhost:4004/catalog/Orders
Authorization: Basic bob:
Content-Type: application/json

{
    "OrderNo": "11",
    "CustomerOrderNo": "Order from bob",
    "currency_code": "EUR",
    "salesOrganization": "",
    "Items": [

    ],
    "ShippingAddress":  {
        "street": "Hauptstraße 1",
        "city": "Trostberg"
    }
}

### Fill Variables from Response
@orderID={{createOrder.response.body.$.ID}}

### Create Order Item
POST http://localhost:4004/catalog/Orders({{orderID}})/Items
Authorization: Basic bob:
Content-Type: application/json

{
    "book_ID": 201,
    "itemNo": 10
}
### Try to update the Order
# Returns Forbidden as the OrderNo is annotated with @Core.Immutable
PATCH http://localhost:4004/catalog/Orders({{orderID}})
Authorization: Basic bob:
Content-Type: application/json

{
    "OrderNo": "12"
}

### Returns Forbidden as the OrderNo is annotated with @Core.Immutable
PATCH http://localhost:4004/catalog/Orders({{orderID}})
Authorization: Basic bob:
Content-Type: application/json

{
    "CustomerOrderNo": "4711"
}

### Read Order as john
GET http://localhost:4004/catalog/Orders
Authorization: Basic john:
Content-Type: application/json

### Create Order as john - using deep insert
POST http://localhost:4004/catalog/Orders
Authorization: Basic john:
Content-Type: application/json

{
    "OrderNo": "10",
    "CustomerOrderNo": "Order from john",
    "currency_code": "EUR",
    "Items": [
        {
            "itemNo": 10,
            "book_ID": 201
        }
    ],
    "ShippingAddress":  {
        "street": "Hauptstraße 1",
        "city": "Trostberg"
    }
}

### Update Orders via Action
POST http://localhost:4004/catalog/multipleOrders
Authorization: Basic bob:
Content-Type: application/json

{
    "numberOfOrders": 2
}

### Create Order via Action
POST http://localhost:4004/catalog/submitOrder
Authorization: Basic bob:
Content-Type: application/json

{ "book":201, "amount":5 }

### Read using $batch
POST http://localhost:4004/catalog/$batch HTTP/1.1
Authorization: Basic john:
OData-Version: 4.0
Content-Type: multipart/mixed;boundary=batch_36522ad7-fc75-4b56-8c71-56071383e77b

--batch_36522ad7-fc75-4b56-8c71-56071383e77b
Content-Type: application/http
Content-Transfer-Encoding:binary

GET Books?$top=1

--batch_36522ad7-fc75-4b56-8c71-56071383e77b--

###
POST http://localhost:4004/catalog/$batch
Authorization: Basic john:
Content-Type: multipart/mixed;boundary=batch_36522ad7-fc75-4b56-8c71-56071383e77b

--batch_36522ad7-fc75-4b56-8c71-56071383e77b
Content-Type: application/http
Content-Transfer-Encoding:binary

GET Books?$top=1

--batch_36522ad7-fc75-4b56-8c71-56071383e77b--

### Create Orders using $batch
POST http://localhost:4004/catalog/$batch HTTP/1.1
Authorization: Basic john:
Content-Type: multipart/mixed; boundary=batch_36522ad7-fc75-4b56-8c71-56071383e77b

--batch_36522ad7-fc75-4b56-8c71-56071383e77b
Content-Type: application/http 
Content-Transfer-Encoding:binary

POST Orders HTTP/1.1
Content-Type: application/json

{
    "OrderNo": "10",
    "CustomerOrderNo": "Order from john",
    "currency_code": "EUR",
    "Items": [
        {
            "itemNo": 10,
            "book_ID": 201
        }
    ],
    "ShippingAddress":  {
        "street": "Hauptstraße 1",
        "city": "Trostberg"
    }
}

--batch_36522ad7-fc75-4b56-8c71-56071383e77b
Content-Type: application/http 
Content-Transfer-Encoding:binary

POST Orders HTTP/1.1
Content-Type: application/json

{
    "OrderNo": "11",
    "CustomerOrderNo": "Order from john",
    "currency_code": "EUR",
    "Items": [
        {
            "itemNo": 10,
            "book_ID": 1
        }
    ],
    "ShippingAddress":  {
        "street": "Hauptstraße 1",
        "city": "Trostberg"
    }
}

--batch_36522ad7-fc75-4b56-8c71-56071383e77b--
